// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: janction/audioStem/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { AudioStemLogs, AudioStemTask, Worker } from "./types";

export const protobufPackage = "janction.audioStem.v1";

/**
 * QueryGetGameRequest is the request type for the Query/GetGame RPC
 * method.
 */
export interface QueryGetAudioStemTaskRequest {
  index: string;
}

/**
 * QueryGetGameResponse is the response type for the Query/GetGame RPC
 * method.
 */
export interface QueryGetAudioStemTaskResponse {
  /** Game defines the game at the requested index. */
  audioStemTask?: AudioStemTask | undefined;
}

/**
 * QueryGetGameRequest is the request type for the Query/GetGame RPC
 * method.
 */
export interface QueryGetAudioStemLogsRequest {
  threadId: string;
}

/**
 * QueryGetGameResponse is the response type for the Query/GetGame RPC
 * method.
 */
export interface QueryGetAudioStemLogsResponse {
  /** Game defines the game at the requested index. */
  audioStemLogs?: AudioStemLogs | undefined;
}

export interface QueryGetPendingAudioStemTaskRequest {
}

export interface QueryGetPendingAudioStemTaskResponse {
  audioStemTasks: AudioStemTask[];
}

export interface QueryGetWorkerRequest {
  worker: string;
}

export interface QueryGetWorkerResponse {
  worker?: Worker | undefined;
}

function createBaseQueryGetAudioStemTaskRequest(): QueryGetAudioStemTaskRequest {
  return { index: "" };
}

export const QueryGetAudioStemTaskRequest: MessageFns<QueryGetAudioStemTaskRequest> = {
  encode(message: QueryGetAudioStemTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetAudioStemTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetAudioStemTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetAudioStemTaskRequest {
    return { index: isSet(object.index) ? globalThis.String(object.index) : "" };
  },

  toJSON(message: QueryGetAudioStemTaskRequest): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetAudioStemTaskRequest>, I>>(
    base?: I,
  ): QueryGetAudioStemTaskRequest {
    return QueryGetAudioStemTaskRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetAudioStemTaskRequest>, I>>(
    object: I,
  ): QueryGetAudioStemTaskRequest {
    const message = createBaseQueryGetAudioStemTaskRequest();
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseQueryGetAudioStemTaskResponse(): QueryGetAudioStemTaskResponse {
  return { audioStemTask: undefined };
}

export const QueryGetAudioStemTaskResponse: MessageFns<QueryGetAudioStemTaskResponse> = {
  encode(message: QueryGetAudioStemTaskResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.audioStemTask !== undefined) {
      AudioStemTask.encode(message.audioStemTask, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetAudioStemTaskResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetAudioStemTaskResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.audioStemTask = AudioStemTask.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetAudioStemTaskResponse {
    return {
      audioStemTask: isSet(object.audioStemTask)
        ? AudioStemTask.fromJSON(object.audioStemTask)
        : undefined,
    };
  },

  toJSON(message: QueryGetAudioStemTaskResponse): unknown {
    const obj: any = {};
    if (message.audioStemTask !== undefined) {
      obj.audioStemTask = AudioStemTask.toJSON(message.audioStemTask);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetAudioStemTaskResponse>, I>>(
    base?: I,
  ): QueryGetAudioStemTaskResponse {
    return QueryGetAudioStemTaskResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetAudioStemTaskResponse>, I>>(
    object: I,
  ): QueryGetAudioStemTaskResponse {
    const message = createBaseQueryGetAudioStemTaskResponse();
    message.audioStemTask = (object.audioStemTask !== undefined && object.audioStemTask !== null)
      ? AudioStemTask.fromPartial(object.audioStemTask)
      : undefined;
    return message;
  },
};

function createBaseQueryGetAudioStemLogsRequest(): QueryGetAudioStemLogsRequest {
  return { threadId: "" };
}

export const QueryGetAudioStemLogsRequest: MessageFns<QueryGetAudioStemLogsRequest> = {
  encode(message: QueryGetAudioStemLogsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.threadId !== "") {
      writer.uint32(10).string(message.threadId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetAudioStemLogsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetAudioStemLogsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.threadId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetAudioStemLogsRequest {
    return { threadId: isSet(object.threadId) ? globalThis.String(object.threadId) : "" };
  },

  toJSON(message: QueryGetAudioStemLogsRequest): unknown {
    const obj: any = {};
    if (message.threadId !== "") {
      obj.threadId = message.threadId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetAudioStemLogsRequest>, I>>(
    base?: I,
  ): QueryGetAudioStemLogsRequest {
    return QueryGetAudioStemLogsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetAudioStemLogsRequest>, I>>(
    object: I,
  ): QueryGetAudioStemLogsRequest {
    const message = createBaseQueryGetAudioStemLogsRequest();
    message.threadId = object.threadId ?? "";
    return message;
  },
};

function createBaseQueryGetAudioStemLogsResponse(): QueryGetAudioStemLogsResponse {
  return { audioStemLogs: undefined };
}

export const QueryGetAudioStemLogsResponse: MessageFns<QueryGetAudioStemLogsResponse> = {
  encode(message: QueryGetAudioStemLogsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.audioStemLogs !== undefined) {
      AudioStemLogs.encode(message.audioStemLogs, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetAudioStemLogsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetAudioStemLogsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.audioStemLogs = AudioStemLogs.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetAudioStemLogsResponse {
    return {
      audioStemLogs: isSet(object.audioStemLogs)
        ? AudioStemLogs.fromJSON(object.audioStemLogs)
        : undefined,
    };
  },

  toJSON(message: QueryGetAudioStemLogsResponse): unknown {
    const obj: any = {};
    if (message.audioStemLogs !== undefined) {
      obj.audioStemLogs = AudioStemLogs.toJSON(message.audioStemLogs);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetAudioStemLogsResponse>, I>>(
    base?: I,
  ): QueryGetAudioStemLogsResponse {
    return QueryGetAudioStemLogsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetAudioStemLogsResponse>, I>>(
    object: I,
  ): QueryGetAudioStemLogsResponse {
    const message = createBaseQueryGetAudioStemLogsResponse();
    message.audioStemLogs = (object.audioStemLogs !== undefined && object.audioStemLogs !== null)
      ? AudioStemLogs.fromPartial(object.audioStemLogs)
      : undefined;
    return message;
  },
};

function createBaseQueryGetPendingAudioStemTaskRequest(): QueryGetPendingAudioStemTaskRequest {
  return {};
}

export const QueryGetPendingAudioStemTaskRequest: MessageFns<QueryGetPendingAudioStemTaskRequest> = {
  encode(_: QueryGetPendingAudioStemTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetPendingAudioStemTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPendingAudioStemTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryGetPendingAudioStemTaskRequest {
    return {};
  },

  toJSON(_: QueryGetPendingAudioStemTaskRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPendingAudioStemTaskRequest>, I>>(
    base?: I,
  ): QueryGetPendingAudioStemTaskRequest {
    return QueryGetPendingAudioStemTaskRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPendingAudioStemTaskRequest>, I>>(
    _: I,
  ): QueryGetPendingAudioStemTaskRequest {
    const message = createBaseQueryGetPendingAudioStemTaskRequest();
    return message;
  },
};

function createBaseQueryGetPendingAudioStemTaskResponse(): QueryGetPendingAudioStemTaskResponse {
  return { audioStemTasks: [] };
}

export const QueryGetPendingAudioStemTaskResponse: MessageFns<QueryGetPendingAudioStemTaskResponse> = {
  encode(message: QueryGetPendingAudioStemTaskResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.audioStemTasks) {
      AudioStemTask.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetPendingAudioStemTaskResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPendingAudioStemTaskResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.audioStemTasks.push(AudioStemTask.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetPendingAudioStemTaskResponse {
    return {
      audioStemTasks: globalThis.Array.isArray(object?.audioStemTasks)
        ? object.audioStemTasks.map((e: any) => AudioStemTask.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryGetPendingAudioStemTaskResponse): unknown {
    const obj: any = {};
    if (message.audioStemTasks?.length) {
      obj.audioStemTasks = message.audioStemTasks.map((e) => AudioStemTask.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPendingAudioStemTaskResponse>, I>>(
    base?: I,
  ): QueryGetPendingAudioStemTaskResponse {
    return QueryGetPendingAudioStemTaskResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPendingAudioStemTaskResponse>, I>>(
    object: I,
  ): QueryGetPendingAudioStemTaskResponse {
    const message = createBaseQueryGetPendingAudioStemTaskResponse();
    message.audioStemTasks = object.audioStemTasks?.map((e) => AudioStemTask.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryGetWorkerRequest(): QueryGetWorkerRequest {
  return { worker: "" };
}

export const QueryGetWorkerRequest: MessageFns<QueryGetWorkerRequest> = {
  encode(message: QueryGetWorkerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.worker !== "") {
      writer.uint32(10).string(message.worker);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetWorkerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetWorkerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worker = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetWorkerRequest {
    return { worker: isSet(object.worker) ? globalThis.String(object.worker) : "" };
  },

  toJSON(message: QueryGetWorkerRequest): unknown {
    const obj: any = {};
    if (message.worker !== "") {
      obj.worker = message.worker;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetWorkerRequest>, I>>(base?: I): QueryGetWorkerRequest {
    return QueryGetWorkerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetWorkerRequest>, I>>(object: I): QueryGetWorkerRequest {
    const message = createBaseQueryGetWorkerRequest();
    message.worker = object.worker ?? "";
    return message;
  },
};

function createBaseQueryGetWorkerResponse(): QueryGetWorkerResponse {
  return { worker: undefined };
}

export const QueryGetWorkerResponse: MessageFns<QueryGetWorkerResponse> = {
  encode(message: QueryGetWorkerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.worker !== undefined) {
      Worker.encode(message.worker, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetWorkerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetWorkerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worker = Worker.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetWorkerResponse {
    return { worker: isSet(object.worker) ? Worker.fromJSON(object.worker) : undefined };
  },

  toJSON(message: QueryGetWorkerResponse): unknown {
    const obj: any = {};
    if (message.worker !== undefined) {
      obj.worker = Worker.toJSON(message.worker);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetWorkerResponse>, I>>(base?: I): QueryGetWorkerResponse {
    return QueryGetWorkerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetWorkerResponse>, I>>(object: I): QueryGetWorkerResponse {
    const message = createBaseQueryGetWorkerResponse();
    message.worker = (object.worker !== undefined && object.worker !== null)
      ? Worker.fromPartial(object.worker)
      : undefined;
    return message;
  },
};

/** Query defines the module Query service. */
export interface Query {
  /** GetAudioStemTask returns the task based on the taskId */
  GetAudioStemTask(request: QueryGetAudioStemTaskRequest): Promise<QueryGetAudioStemTaskResponse>;
  GetAudioStemLogs(request: QueryGetAudioStemLogsRequest): Promise<QueryGetAudioStemLogsResponse>;
  GetWorker(request: QueryGetWorkerRequest): Promise<QueryGetWorkerResponse>;
  GetPendingAudioStemTasks(
    request: QueryGetPendingAudioStemTaskRequest,
  ): Promise<QueryGetPendingAudioStemTaskResponse>;
}

export const QueryServiceName = "janction.audioStem.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.GetAudioStemTask = this.GetAudioStemTask.bind(this);
    this.GetAudioStemLogs = this.GetAudioStemLogs.bind(this);
    this.GetWorker = this.GetWorker.bind(this);
    this.GetPendingAudioStemTasks = this.GetPendingAudioStemTasks.bind(this);
  }
  GetAudioStemTask(request: QueryGetAudioStemTaskRequest): Promise<QueryGetAudioStemTaskResponse> {
    const data = QueryGetAudioStemTaskRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetAudioStemTask", data);
    return promise.then((data) => QueryGetAudioStemTaskResponse.decode(new BinaryReader(data)));
  }

  GetAudioStemLogs(request: QueryGetAudioStemLogsRequest): Promise<QueryGetAudioStemLogsResponse> {
    const data = QueryGetAudioStemLogsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetAudioStemLogs", data);
    return promise.then((data) => QueryGetAudioStemLogsResponse.decode(new BinaryReader(data)));
  }

  GetWorker(request: QueryGetWorkerRequest): Promise<QueryGetWorkerResponse> {
    const data = QueryGetWorkerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetWorker", data);
    return promise.then((data) => QueryGetWorkerResponse.decode(new BinaryReader(data)));
  }

  GetPendingAudioStemTasks(
    request: QueryGetPendingAudioStemTaskRequest,
  ): Promise<QueryGetPendingAudioStemTaskResponse> {
    const data = QueryGetPendingAudioStemTaskRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPendingAudioStemTasks", data);
    return promise.then((data) => QueryGetPendingAudioStemTaskResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
