// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: janction/audioStem/v1/query.proto

package audioStemv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_GetAudioStemTask_FullMethodName         = "/janction.audioStem.v1.Query/GetAudioStemTask"
	Query_GetAudioStemLogs_FullMethodName         = "/janction.audioStem.v1.Query/GetAudioStemLogs"
	Query_GetWorker_FullMethodName                = "/janction.audioStem.v1.Query/GetWorker"
	Query_GetPendingAudioStemTasks_FullMethodName = "/janction.audioStem.v1.Query/GetPendingAudioStemTasks"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// GetAudioStemTask returns the task based on the taskId
	GetAudioStemTask(ctx context.Context, in *QueryGetAudioStemTaskRequest, opts ...grpc.CallOption) (*QueryGetAudioStemTaskResponse, error)
	GetAudioStemLogs(ctx context.Context, in *QueryGetAudioStemLogsRequest, opts ...grpc.CallOption) (*QueryGetAudioStemLogsResponse, error)
	GetWorker(ctx context.Context, in *QueryGetWorkerRequest, opts ...grpc.CallOption) (*QueryGetWorkerResponse, error)
	GetPendingAudioStemTasks(ctx context.Context, in *QueryGetPendingAudioStemTaskRequest, opts ...grpc.CallOption) (*QueryGetPendingAudioStemTaskResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetAudioStemTask(ctx context.Context, in *QueryGetAudioStemTaskRequest, opts ...grpc.CallOption) (*QueryGetAudioStemTaskResponse, error) {
	out := new(QueryGetAudioStemTaskResponse)
	err := c.cc.Invoke(ctx, Query_GetAudioStemTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAudioStemLogs(ctx context.Context, in *QueryGetAudioStemLogsRequest, opts ...grpc.CallOption) (*QueryGetAudioStemLogsResponse, error) {
	out := new(QueryGetAudioStemLogsResponse)
	err := c.cc.Invoke(ctx, Query_GetAudioStemLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWorker(ctx context.Context, in *QueryGetWorkerRequest, opts ...grpc.CallOption) (*QueryGetWorkerResponse, error) {
	out := new(QueryGetWorkerResponse)
	err := c.cc.Invoke(ctx, Query_GetWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPendingAudioStemTasks(ctx context.Context, in *QueryGetPendingAudioStemTaskRequest, opts ...grpc.CallOption) (*QueryGetPendingAudioStemTaskResponse, error) {
	out := new(QueryGetPendingAudioStemTaskResponse)
	err := c.cc.Invoke(ctx, Query_GetPendingAudioStemTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// GetAudioStemTask returns the task based on the taskId
	GetAudioStemTask(context.Context, *QueryGetAudioStemTaskRequest) (*QueryGetAudioStemTaskResponse, error)
	GetAudioStemLogs(context.Context, *QueryGetAudioStemLogsRequest) (*QueryGetAudioStemLogsResponse, error)
	GetWorker(context.Context, *QueryGetWorkerRequest) (*QueryGetWorkerResponse, error)
	GetPendingAudioStemTasks(context.Context, *QueryGetPendingAudioStemTaskRequest) (*QueryGetPendingAudioStemTaskResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) GetAudioStemTask(context.Context, *QueryGetAudioStemTaskRequest) (*QueryGetAudioStemTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudioStemTask not implemented")
}
func (UnimplementedQueryServer) GetAudioStemLogs(context.Context, *QueryGetAudioStemLogsRequest) (*QueryGetAudioStemLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudioStemLogs not implemented")
}
func (UnimplementedQueryServer) GetWorker(context.Context, *QueryGetWorkerRequest) (*QueryGetWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorker not implemented")
}
func (UnimplementedQueryServer) GetPendingAudioStemTasks(context.Context, *QueryGetPendingAudioStemTaskRequest) (*QueryGetPendingAudioStemTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingAudioStemTasks not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_GetAudioStemTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAudioStemTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAudioStemTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetAudioStemTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAudioStemTask(ctx, req.(*QueryGetAudioStemTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAudioStemLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAudioStemLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAudioStemLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetAudioStemLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAudioStemLogs(ctx, req.(*QueryGetAudioStemLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWorker(ctx, req.(*QueryGetWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPendingAudioStemTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPendingAudioStemTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPendingAudioStemTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetPendingAudioStemTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPendingAudioStemTasks(ctx, req.(*QueryGetPendingAudioStemTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "janction.audioStem.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAudioStemTask",
			Handler:    _Query_GetAudioStemTask_Handler,
		},
		{
			MethodName: "GetAudioStemLogs",
			Handler:    _Query_GetAudioStemLogs_Handler,
		},
		{
			MethodName: "GetWorker",
			Handler:    _Query_GetWorker_Handler,
		},
		{
			MethodName: "GetPendingAudioStemTasks",
			Handler:    _Query_GetPendingAudioStemTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "janction/audioStem/v1/query.proto",
}
