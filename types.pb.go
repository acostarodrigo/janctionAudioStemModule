// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: janction/audioStem/v1/types.proto

package audioStem

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AudioStemLogs_AudioStemLog_SEVERITY int32

const (
	AudioStemLogs_AudioStemLog_INFO    AudioStemLogs_AudioStemLog_SEVERITY = 0
	AudioStemLogs_AudioStemLog_SUCCESS AudioStemLogs_AudioStemLog_SEVERITY = 1
	AudioStemLogs_AudioStemLog_ERROR   AudioStemLogs_AudioStemLog_SEVERITY = 2
)

var AudioStemLogs_AudioStemLog_SEVERITY_name = map[int32]string{
	0: "INFO",
	1: "SUCCESS",
	2: "ERROR",
}

var AudioStemLogs_AudioStemLog_SEVERITY_value = map[string]int32{
	"INFO":    0,
	"SUCCESS": 1,
	"ERROR":   2,
}

func (x AudioStemLogs_AudioStemLog_SEVERITY) String() string {
	return proto.EnumName(AudioStemLogs_AudioStemLog_SEVERITY_name, int32(x))
}

func (AudioStemLogs_AudioStemLog_SEVERITY) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2c8128c416e7a81b, []int{7, 0, 0}
}

// Params defines the parameters of the module.
type Params struct {
	MinWorkerStaking    *types.Coin `protobuf:"bytes,1,opt,name=min_worker_staking,json=minWorkerStaking,proto3" json:"min_worker_staking,omitempty"`
	MaxWorkersPerThread int64       `protobuf:"varint,2,opt,name=max_workers_per_thread,json=maxWorkersPerThread,proto3" json:"max_workers_per_thread,omitempty"`
	MinValidators       int64       `protobuf:"varint,3,opt,name=min_validators,json=minValidators,proto3" json:"min_validators,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c8128c416e7a81b, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMinWorkerStaking() *types.Coin {
	if m != nil {
		return m.MinWorkerStaking
	}
	return nil
}

func (m *Params) GetMaxWorkersPerThread() int64 {
	if m != nil {
		return m.MaxWorkersPerThread
	}
	return 0
}

func (m *Params) GetMinValidators() int64 {
	if m != nil {
		return m.MinValidators
	}
	return 0
}

// GenesisState is the state that must be provided at genesis.
type GenesisState struct {
	// params defines all the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// Video Rendering Task index
	AudioStemTaskInfo AudioStemTaskInfo `protobuf:"bytes,3,opt,name=audioStemTaskInfo,proto3" json:"audioStemTaskInfo"`
	// List of Video Rendering tasks
	AudioStemTaskList []IndexedAudioStemTask `protobuf:"bytes,4,rep,name=audioStemTaskList,proto3" json:"audioStemTaskList"`
	// List of Workers
	Workers []Worker `protobuf:"bytes,5,rep,name=workers,proto3" json:"workers"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c8128c416e7a81b, []int{1}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetAudioStemTaskInfo() AudioStemTaskInfo {
	if m != nil {
		return m.AudioStemTaskInfo
	}
	return AudioStemTaskInfo{}
}

func (m *GenesisState) GetAudioStemTaskList() []IndexedAudioStemTask {
	if m != nil {
		return m.AudioStemTaskList
	}
	return nil
}

func (m *GenesisState) GetWorkers() []Worker {
	if m != nil {
		return m.Workers
	}
	return nil
}

type Worker struct {
	Address            string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Reputation         *Worker_Reputation `protobuf:"bytes,3,opt,name=reputation,proto3" json:"reputation,omitempty"`
	Enabled            bool               `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	CurrentTaskId      string             `protobuf:"bytes,5,opt,name=current_task_id,json=currentTaskId,proto3" json:"current_task_id,omitempty"`
	CurrentThreadIndex int32              `protobuf:"varint,6,opt,name=current_thread_index,json=currentThreadIndex,proto3" json:"current_thread_index,omitempty"`
	PublicIp           string             `protobuf:"bytes,7,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
	IpfsId             string             `protobuf:"bytes,8,opt,name=ipfs_id,json=ipfsId,proto3" json:"ipfs_id,omitempty"`
}

func (m *Worker) Reset()         { *m = Worker{} }
func (m *Worker) String() string { return proto.CompactTextString(m) }
func (*Worker) ProtoMessage()    {}
func (*Worker) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c8128c416e7a81b, []int{2}
}
func (m *Worker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Worker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Worker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Worker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Worker.Merge(m, src)
}
func (m *Worker) XXX_Size() int {
	return m.Size()
}
func (m *Worker) XXX_DiscardUnknown() {
	xxx_messageInfo_Worker.DiscardUnknown(m)
}

var xxx_messageInfo_Worker proto.InternalMessageInfo

func (m *Worker) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Worker) GetReputation() *Worker_Reputation {
	if m != nil {
		return m.Reputation
	}
	return nil
}

func (m *Worker) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Worker) GetCurrentTaskId() string {
	if m != nil {
		return m.CurrentTaskId
	}
	return ""
}

func (m *Worker) GetCurrentThreadIndex() int32 {
	if m != nil {
		return m.CurrentThreadIndex
	}
	return 0
}

func (m *Worker) GetPublicIp() string {
	if m != nil {
		return m.PublicIp
	}
	return ""
}

func (m *Worker) GetIpfsId() string {
	if m != nil {
		return m.IpfsId
	}
	return ""
}

type Worker_Reputation struct {
	Staked          *types.Coin `protobuf:"bytes,1,opt,name=staked,proto3" json:"staked,omitempty"`
	Points          int64       `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
	Validations     int32       `protobuf:"varint,3,opt,name=validations,proto3" json:"validations,omitempty"`
	Solutions       int32       `protobuf:"varint,4,opt,name=solutions,proto3" json:"solutions,omitempty"`
	Winnings        types.Coin  `protobuf:"bytes,5,opt,name=winnings,proto3" json:"winnings"`
	RenderDurations []int64     `protobuf:"varint,6,rep,packed,name=render_durations,json=renderDurations,proto3" json:"render_durations,omitempty"`
}

func (m *Worker_Reputation) Reset()         { *m = Worker_Reputation{} }
func (m *Worker_Reputation) String() string { return proto.CompactTextString(m) }
func (*Worker_Reputation) ProtoMessage()    {}
func (*Worker_Reputation) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c8128c416e7a81b, []int{2, 0}
}
func (m *Worker_Reputation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Worker_Reputation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Worker_Reputation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Worker_Reputation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Worker_Reputation.Merge(m, src)
}
func (m *Worker_Reputation) XXX_Size() int {
	return m.Size()
}
func (m *Worker_Reputation) XXX_DiscardUnknown() {
	xxx_messageInfo_Worker_Reputation.DiscardUnknown(m)
}

var xxx_messageInfo_Worker_Reputation proto.InternalMessageInfo

func (m *Worker_Reputation) GetStaked() *types.Coin {
	if m != nil {
		return m.Staked
	}
	return nil
}

func (m *Worker_Reputation) GetPoints() int64 {
	if m != nil {
		return m.Points
	}
	return 0
}

func (m *Worker_Reputation) GetValidations() int32 {
	if m != nil {
		return m.Validations
	}
	return 0
}

func (m *Worker_Reputation) GetSolutions() int32 {
	if m != nil {
		return m.Solutions
	}
	return 0
}

func (m *Worker_Reputation) GetWinnings() types.Coin {
	if m != nil {
		return m.Winnings
	}
	return types.Coin{}
}

func (m *Worker_Reputation) GetRenderDurations() []int64 {
	if m != nil {
		return m.RenderDurations
	}
	return nil
}

// Audio Stem Task
// @cid the IPFS CID submitted by a task requester
type AudioStemTask struct {
	TaskId      string             `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Requester   string             `protobuf:"bytes,2,opt,name=requester,proto3" json:"requester,omitempty"`
	Cid         string             `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
	AmountFiles int32              `protobuf:"varint,4,opt,name=amount_files,json=amountFiles,proto3" json:"amount_files,omitempty"`
	Instrument  string             `protobuf:"bytes,5,opt,name=instrument,proto3" json:"instrument,omitempty"`
	Mp3         bool               `protobuf:"varint,6,opt,name=mp3,proto3" json:"mp3,omitempty"`
	Completed   bool               `protobuf:"varint,7,opt,name=completed,proto3" json:"completed,omitempty"`
	Reward      *types.Coin        `protobuf:"bytes,8,opt,name=reward,proto3" json:"reward,omitempty"`
	Threads     []*AudioStemThread `protobuf:"bytes,9,rep,name=threads,proto3" json:"threads,omitempty"`
}

func (m *AudioStemTask) Reset()         { *m = AudioStemTask{} }
func (m *AudioStemTask) String() string { return proto.CompactTextString(m) }
func (*AudioStemTask) ProtoMessage()    {}
func (*AudioStemTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c8128c416e7a81b, []int{3}
}
func (m *AudioStemTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AudioStemTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AudioStemTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AudioStemTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioStemTask.Merge(m, src)
}
func (m *AudioStemTask) XXX_Size() int {
	return m.Size()
}
func (m *AudioStemTask) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioStemTask.DiscardUnknown(m)
}

var xxx_messageInfo_AudioStemTask proto.InternalMessageInfo

func (m *AudioStemTask) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *AudioStemTask) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *AudioStemTask) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *AudioStemTask) GetAmountFiles() int32 {
	if m != nil {
		return m.AmountFiles
	}
	return 0
}

func (m *AudioStemTask) GetInstrument() string {
	if m != nil {
		return m.Instrument
	}
	return ""
}

func (m *AudioStemTask) GetMp3() bool {
	if m != nil {
		return m.Mp3
	}
	return false
}

func (m *AudioStemTask) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

func (m *AudioStemTask) GetReward() *types.Coin {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *AudioStemTask) GetThreads() []*AudioStemThread {
	if m != nil {
		return m.Threads
	}
	return nil
}

// A Video Rendering Thread is the smallest unit of work for a Task.
// Workers will try to complete a thread as soon as possible to submit first a solution
type AudioStemThread struct {
	ThreadId           string                        `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	TaskId             string                        `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Filename           string                        `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	Instrument         string                        `protobuf:"bytes,4,opt,name=instrument,proto3" json:"instrument,omitempty"`
	Mp3                bool                          `protobuf:"varint,5,opt,name=mp3,proto3" json:"mp3,omitempty"`
	Completed          bool                          `protobuf:"varint,6,opt,name=completed,proto3" json:"completed,omitempty"`
	Workers            []string                      `protobuf:"bytes,7,rep,name=workers,proto3" json:"workers,omitempty"`
	Solution           *AudioStemThread_Solution     `protobuf:"bytes,8,opt,name=solution,proto3" json:"solution,omitempty"`
	Validations        []*AudioStemThread_Validation `protobuf:"bytes,9,rep,name=validations,proto3" json:"validations,omitempty"`
	AverageStemSeconds int64                         `protobuf:"varint,10,opt,name=average_stem_seconds,json=averageStemSeconds,proto3" json:"average_stem_seconds,omitempty"`
}

func (m *AudioStemThread) Reset()         { *m = AudioStemThread{} }
func (m *AudioStemThread) String() string { return proto.CompactTextString(m) }
func (*AudioStemThread) ProtoMessage()    {}
func (*AudioStemThread) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c8128c416e7a81b, []int{4}
}
func (m *AudioStemThread) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AudioStemThread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AudioStemThread.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AudioStemThread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioStemThread.Merge(m, src)
}
func (m *AudioStemThread) XXX_Size() int {
	return m.Size()
}
func (m *AudioStemThread) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioStemThread.DiscardUnknown(m)
}

var xxx_messageInfo_AudioStemThread proto.InternalMessageInfo

func (m *AudioStemThread) GetThreadId() string {
	if m != nil {
		return m.ThreadId
	}
	return ""
}

func (m *AudioStemThread) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *AudioStemThread) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *AudioStemThread) GetInstrument() string {
	if m != nil {
		return m.Instrument
	}
	return ""
}

func (m *AudioStemThread) GetMp3() bool {
	if m != nil {
		return m.Mp3
	}
	return false
}

func (m *AudioStemThread) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

func (m *AudioStemThread) GetWorkers() []string {
	if m != nil {
		return m.Workers
	}
	return nil
}

func (m *AudioStemThread) GetSolution() *AudioStemThread_Solution {
	if m != nil {
		return m.Solution
	}
	return nil
}

func (m *AudioStemThread) GetValidations() []*AudioStemThread_Validation {
	if m != nil {
		return m.Validations
	}
	return nil
}

func (m *AudioStemThread) GetAverageStemSeconds() int64 {
	if m != nil {
		return m.AverageStemSeconds
	}
	return 0
}

type AudioStemThread_Solution struct {
	ProposedBy string                  `protobuf:"bytes,1,opt,name=proposed_by,json=proposedBy,proto3" json:"proposed_by,omitempty"`
	Stems      []*AudioStemThread_Stem `protobuf:"bytes,2,rep,name=stems,proto3" json:"stems,omitempty"`
	PublicKey  string                  `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Dir        string                  `protobuf:"bytes,4,opt,name=dir,proto3" json:"dir,omitempty"`
	Accepted   bool                    `protobuf:"varint,5,opt,name=accepted,proto3" json:"accepted,omitempty"`
}

func (m *AudioStemThread_Solution) Reset()         { *m = AudioStemThread_Solution{} }
func (m *AudioStemThread_Solution) String() string { return proto.CompactTextString(m) }
func (*AudioStemThread_Solution) ProtoMessage()    {}
func (*AudioStemThread_Solution) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c8128c416e7a81b, []int{4, 0}
}
func (m *AudioStemThread_Solution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AudioStemThread_Solution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AudioStemThread_Solution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AudioStemThread_Solution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioStemThread_Solution.Merge(m, src)
}
func (m *AudioStemThread_Solution) XXX_Size() int {
	return m.Size()
}
func (m *AudioStemThread_Solution) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioStemThread_Solution.DiscardUnknown(m)
}

var xxx_messageInfo_AudioStemThread_Solution proto.InternalMessageInfo

func (m *AudioStemThread_Solution) GetProposedBy() string {
	if m != nil {
		return m.ProposedBy
	}
	return ""
}

func (m *AudioStemThread_Solution) GetStems() []*AudioStemThread_Stem {
	if m != nil {
		return m.Stems
	}
	return nil
}

func (m *AudioStemThread_Solution) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *AudioStemThread_Solution) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *AudioStemThread_Solution) GetAccepted() bool {
	if m != nil {
		return m.Accepted
	}
	return false
}

type AudioStemThread_Validation struct {
	Validator string                  `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	Stems     []*AudioStemThread_Stem `protobuf:"bytes,2,rep,name=stems,proto3" json:"stems,omitempty"`
	PublicKey string                  `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	IsReverse bool                    `protobuf:"varint,4,opt,name=is_reverse,json=isReverse,proto3" json:"is_reverse,omitempty"`
}

func (m *AudioStemThread_Validation) Reset()         { *m = AudioStemThread_Validation{} }
func (m *AudioStemThread_Validation) String() string { return proto.CompactTextString(m) }
func (*AudioStemThread_Validation) ProtoMessage()    {}
func (*AudioStemThread_Validation) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c8128c416e7a81b, []int{4, 1}
}
func (m *AudioStemThread_Validation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AudioStemThread_Validation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AudioStemThread_Validation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AudioStemThread_Validation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioStemThread_Validation.Merge(m, src)
}
func (m *AudioStemThread_Validation) XXX_Size() int {
	return m.Size()
}
func (m *AudioStemThread_Validation) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioStemThread_Validation.DiscardUnknown(m)
}

var xxx_messageInfo_AudioStemThread_Validation proto.InternalMessageInfo

func (m *AudioStemThread_Validation) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *AudioStemThread_Validation) GetStems() []*AudioStemThread_Stem {
	if m != nil {
		return m.Stems
	}
	return nil
}

func (m *AudioStemThread_Validation) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *AudioStemThread_Validation) GetIsReverse() bool {
	if m != nil {
		return m.IsReverse
	}
	return false
}

type AudioStemThread_Stem struct {
	Filename     string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Signature    string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Cid          string `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
	Hash         string `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	ValidCount   int64  `protobuf:"varint,5,opt,name=validCount,proto3" json:"validCount,omitempty"`
	InvalidCount int64  `protobuf:"varint,6,opt,name=invalidCount,proto3" json:"invalidCount,omitempty"`
}

func (m *AudioStemThread_Stem) Reset()         { *m = AudioStemThread_Stem{} }
func (m *AudioStemThread_Stem) String() string { return proto.CompactTextString(m) }
func (*AudioStemThread_Stem) ProtoMessage()    {}
func (*AudioStemThread_Stem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c8128c416e7a81b, []int{4, 2}
}
func (m *AudioStemThread_Stem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AudioStemThread_Stem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AudioStemThread_Stem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AudioStemThread_Stem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioStemThread_Stem.Merge(m, src)
}
func (m *AudioStemThread_Stem) XXX_Size() int {
	return m.Size()
}
func (m *AudioStemThread_Stem) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioStemThread_Stem.DiscardUnknown(m)
}

var xxx_messageInfo_AudioStemThread_Stem proto.InternalMessageInfo

func (m *AudioStemThread_Stem) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *AudioStemThread_Stem) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *AudioStemThread_Stem) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *AudioStemThread_Stem) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *AudioStemThread_Stem) GetValidCount() int64 {
	if m != nil {
		return m.ValidCount
	}
	return 0
}

func (m *AudioStemThread_Stem) GetInvalidCount() int64 {
	if m != nil {
		return m.InvalidCount
	}
	return 0
}

// Stores information about the Video Rendering  task
type AudioStemTaskInfo struct {
	NextId int64 `protobuf:"varint,1,opt,name=nextId,proto3" json:"nextId,omitempty"`
}

func (m *AudioStemTaskInfo) Reset()         { *m = AudioStemTaskInfo{} }
func (m *AudioStemTaskInfo) String() string { return proto.CompactTextString(m) }
func (*AudioStemTaskInfo) ProtoMessage()    {}
func (*AudioStemTaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c8128c416e7a81b, []int{5}
}
func (m *AudioStemTaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AudioStemTaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AudioStemTaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AudioStemTaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioStemTaskInfo.Merge(m, src)
}
func (m *AudioStemTaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *AudioStemTaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioStemTaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AudioStemTaskInfo proto.InternalMessageInfo

func (m *AudioStemTaskInfo) GetNextId() int64 {
	if m != nil {
		return m.NextId
	}
	return 0
}

// Stores the Video Rendering Task with the index
type IndexedAudioStemTask struct {
	Index         string        `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	AudioStemTask AudioStemTask `protobuf:"bytes,2,opt,name=audioStemTask,proto3" json:"audioStemTask"`
}

func (m *IndexedAudioStemTask) Reset()         { *m = IndexedAudioStemTask{} }
func (m *IndexedAudioStemTask) String() string { return proto.CompactTextString(m) }
func (*IndexedAudioStemTask) ProtoMessage()    {}
func (*IndexedAudioStemTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c8128c416e7a81b, []int{6}
}
func (m *IndexedAudioStemTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexedAudioStemTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexedAudioStemTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexedAudioStemTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexedAudioStemTask.Merge(m, src)
}
func (m *IndexedAudioStemTask) XXX_Size() int {
	return m.Size()
}
func (m *IndexedAudioStemTask) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexedAudioStemTask.DiscardUnknown(m)
}

var xxx_messageInfo_IndexedAudioStemTask proto.InternalMessageInfo

func (m *IndexedAudioStemTask) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *IndexedAudioStemTask) GetAudioStemTask() AudioStemTask {
	if m != nil {
		return m.AudioStemTask
	}
	return AudioStemTask{}
}

type AudioStemLogs struct {
	ThreadId string                        `protobuf:"bytes,1,opt,name=threadId,proto3" json:"threadId,omitempty"`
	Logs     []*AudioStemLogs_AudioStemLog `protobuf:"bytes,2,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (m *AudioStemLogs) Reset()         { *m = AudioStemLogs{} }
func (m *AudioStemLogs) String() string { return proto.CompactTextString(m) }
func (*AudioStemLogs) ProtoMessage()    {}
func (*AudioStemLogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c8128c416e7a81b, []int{7}
}
func (m *AudioStemLogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AudioStemLogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AudioStemLogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AudioStemLogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioStemLogs.Merge(m, src)
}
func (m *AudioStemLogs) XXX_Size() int {
	return m.Size()
}
func (m *AudioStemLogs) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioStemLogs.DiscardUnknown(m)
}

var xxx_messageInfo_AudioStemLogs proto.InternalMessageInfo

func (m *AudioStemLogs) GetThreadId() string {
	if m != nil {
		return m.ThreadId
	}
	return ""
}

func (m *AudioStemLogs) GetLogs() []*AudioStemLogs_AudioStemLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

type AudioStemLogs_AudioStemLog struct {
	Log       string                              `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
	Timestamp int64                               `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Severity  AudioStemLogs_AudioStemLog_SEVERITY `protobuf:"varint,4,opt,name=severity,proto3,enum=janction.audioStem.v1.AudioStemLogs_AudioStemLog_SEVERITY" json:"severity,omitempty"`
}

func (m *AudioStemLogs_AudioStemLog) Reset()         { *m = AudioStemLogs_AudioStemLog{} }
func (m *AudioStemLogs_AudioStemLog) String() string { return proto.CompactTextString(m) }
func (*AudioStemLogs_AudioStemLog) ProtoMessage()    {}
func (*AudioStemLogs_AudioStemLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c8128c416e7a81b, []int{7, 0}
}
func (m *AudioStemLogs_AudioStemLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AudioStemLogs_AudioStemLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AudioStemLogs_AudioStemLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AudioStemLogs_AudioStemLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioStemLogs_AudioStemLog.Merge(m, src)
}
func (m *AudioStemLogs_AudioStemLog) XXX_Size() int {
	return m.Size()
}
func (m *AudioStemLogs_AudioStemLog) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioStemLogs_AudioStemLog.DiscardUnknown(m)
}

var xxx_messageInfo_AudioStemLogs_AudioStemLog proto.InternalMessageInfo

func (m *AudioStemLogs_AudioStemLog) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

func (m *AudioStemLogs_AudioStemLog) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AudioStemLogs_AudioStemLog) GetSeverity() AudioStemLogs_AudioStemLog_SEVERITY {
	if m != nil {
		return m.Severity
	}
	return AudioStemLogs_AudioStemLog_INFO
}

func init() {
	proto.RegisterEnum("janction.audioStem.v1.AudioStemLogs_AudioStemLog_SEVERITY", AudioStemLogs_AudioStemLog_SEVERITY_name, AudioStemLogs_AudioStemLog_SEVERITY_value)
	proto.RegisterType((*Params)(nil), "janction.audioStem.v1.Params")
	proto.RegisterType((*GenesisState)(nil), "janction.audioStem.v1.GenesisState")
	proto.RegisterType((*Worker)(nil), "janction.audioStem.v1.Worker")
	proto.RegisterType((*Worker_Reputation)(nil), "janction.audioStem.v1.Worker.Reputation")
	proto.RegisterType((*AudioStemTask)(nil), "janction.audioStem.v1.AudioStemTask")
	proto.RegisterType((*AudioStemThread)(nil), "janction.audioStem.v1.AudioStemThread")
	proto.RegisterType((*AudioStemThread_Solution)(nil), "janction.audioStem.v1.AudioStemThread.Solution")
	proto.RegisterType((*AudioStemThread_Validation)(nil), "janction.audioStem.v1.AudioStemThread.Validation")
	proto.RegisterType((*AudioStemThread_Stem)(nil), "janction.audioStem.v1.AudioStemThread.Stem")
	proto.RegisterType((*AudioStemTaskInfo)(nil), "janction.audioStem.v1.AudioStemTaskInfo")
	proto.RegisterType((*IndexedAudioStemTask)(nil), "janction.audioStem.v1.IndexedAudioStemTask")
	proto.RegisterType((*AudioStemLogs)(nil), "janction.audioStem.v1.AudioStemLogs")
	proto.RegisterType((*AudioStemLogs_AudioStemLog)(nil), "janction.audioStem.v1.AudioStemLogs.AudioStemLog")
}

func init() { proto.RegisterFile("janction/audioStem/v1/types.proto", fileDescriptor_2c8128c416e7a81b) }

var fileDescriptor_2c8128c416e7a81b = []byte{
	// 1264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcb, 0x6f, 0x1b, 0x45,
	0x18, 0xcf, 0xc6, 0xaf, 0xf5, 0xe7, 0xa4, 0x4d, 0x87, 0x50, 0xb6, 0x86, 0x18, 0xd7, 0x82, 0xca,
	0xa8, 0x60, 0x37, 0xa9, 0x04, 0x82, 0x0a, 0x89, 0x26, 0xa4, 0x25, 0x6a, 0x45, 0xab, 0x71, 0x09,
	0x02, 0x21, 0xad, 0xc6, 0xde, 0xa9, 0x33, 0xc4, 0x3b, 0xbb, 0xcc, 0x8c, 0xd3, 0xe4, 0xc2, 0xdf,
	0xc0, 0xdf, 0x81, 0xc4, 0x05, 0x71, 0xe1, 0x0e, 0x52, 0xb9, 0x55, 0x48, 0x48, 0x70, 0x41, 0xa8,
	0xbd, 0xf3, 0x2f, 0x80, 0xe6, 0xb1, 0x6b, 0x3b, 0xcf, 0x72, 0xe1, 0x36, 0xf3, 0xfb, 0x1e, 0x33,
	0xdf, 0xef, 0x7b, 0xec, 0x2c, 0x5c, 0xfe, 0x92, 0xf0, 0x81, 0x62, 0x09, 0xef, 0x92, 0x71, 0xc4,
	0x92, 0x9e, 0xa2, 0x71, 0x77, 0x6f, 0xb5, 0xab, 0x0e, 0x52, 0x2a, 0x3b, 0xa9, 0x48, 0x54, 0x82,
	0x5e, 0xcc, 0x54, 0x3a, 0xb9, 0x4a, 0x67, 0x6f, 0xb5, 0xde, 0x18, 0x24, 0x32, 0x4e, 0x64, 0xb7,
	0x4f, 0x24, 0xed, 0xee, 0xad, 0xf6, 0xa9, 0x22, 0xab, 0xdd, 0x41, 0xc2, 0xb8, 0x35, 0xab, 0x5f,
	0xb2, 0xf2, 0xd0, 0xec, 0xba, 0x76, 0xe3, 0x44, 0xcb, 0xc3, 0x64, 0x98, 0x58, 0x5c, 0xaf, 0x2c,
	0xda, 0xfa, 0xce, 0x83, 0xf2, 0x7d, 0x22, 0x48, 0x2c, 0xd1, 0x6d, 0x40, 0x31, 0xe3, 0xe1, 0xa3,
	0x44, 0xec, 0x52, 0x11, 0x4a, 0x45, 0x76, 0x19, 0x1f, 0x06, 0x5e, 0xd3, 0x6b, 0xd7, 0xd6, 0x2e,
	0x75, 0x9c, 0x2f, 0x7d, 0x70, 0xc7, 0x1d, 0xdc, 0xd9, 0x48, 0x18, 0xc7, 0x4b, 0x31, 0xe3, 0x9f,
	0x1a, 0x9b, 0x9e, 0x35, 0x41, 0xd7, 0xe1, 0x62, 0x4c, 0xf6, 0x9d, 0x23, 0x19, 0xa6, 0x54, 0x84,
	0x6a, 0x47, 0x50, 0x12, 0x05, 0xf3, 0x4d, 0xaf, 0x5d, 0xc0, 0x2f, 0xc4, 0x64, 0xdf, 0x5a, 0xc8,
	0xfb, 0x54, 0x3c, 0x30, 0x22, 0xf4, 0x3a, 0x9c, 0xd3, 0xa7, 0xef, 0x91, 0x11, 0x8b, 0x88, 0x4a,
	0x84, 0x0c, 0x0a, 0x46, 0x79, 0x31, 0x66, 0x7c, 0x3b, 0x07, 0x5b, 0xbf, 0xcc, 0xc3, 0xc2, 0x6d,
	0xca, 0xa9, 0x64, 0xb2, 0xa7, 0x88, 0xa2, 0xe8, 0x06, 0x94, 0x53, 0x73, 0x7f, 0x77, 0xd3, 0x95,
	0xce, 0xb1, 0xcc, 0x75, 0x6c, 0x90, 0xeb, 0xc5, 0xc7, 0x7f, 0xbe, 0x3a, 0x87, 0x9d, 0x09, 0xfa,
	0x02, 0x2e, 0xe4, 0x4a, 0x0f, 0x88, 0xdc, 0xdd, 0xe2, 0x0f, 0x13, 0x73, 0x6e, 0x6d, 0xad, 0x7d,
	0x82, 0x9f, 0x9b, 0x87, 0xf5, 0x9d, 0xcb, 0xa3, 0x8e, 0x50, 0x78, 0xc8, 0xfb, 0x5d, 0x26, 0x55,
	0x50, 0x6c, 0x16, 0xda, 0xb5, 0xb5, 0xab, 0x27, 0x78, 0xdf, 0xe2, 0x11, 0xdd, 0xa7, 0xd1, 0xcc,
	0x21, 0xc7, 0x1e, 0xa0, 0x7d, 0xa1, 0xf7, 0xa1, 0xe2, 0x48, 0x0e, 0x4a, 0xc6, 0xed, 0x49, 0xc1,
	0x5b, 0xb6, 0x9d, 0xa3, 0xcc, 0xa6, 0xf5, 0x7d, 0x11, 0xca, 0x56, 0x82, 0xd6, 0xa0, 0x42, 0xa2,
	0x48, 0x50, 0x69, 0x69, 0xac, 0xae, 0x07, 0xbf, 0xfe, 0xf0, 0xd6, 0xb2, 0xcb, 0xf9, 0x4d, 0x2b,
	0xe9, 0x29, 0xc1, 0xf8, 0x10, 0x67, 0x8a, 0xe8, 0x23, 0x00, 0x41, 0xd3, 0xb1, 0x22, 0xfa, 0xbc,
	0x33, 0x58, 0xb3, 0xc7, 0x74, 0x70, 0xae, 0x8f, 0xa7, 0x6c, 0x51, 0x00, 0x15, 0xca, 0x49, 0x7f,
	0x44, 0xa3, 0xa0, 0xd8, 0xf4, 0xda, 0x3e, 0xce, 0xb6, 0xe8, 0x0a, 0x9c, 0x1f, 0x8c, 0x85, 0xa0,
	0x5c, 0x85, 0x8a, 0xc8, 0xdd, 0x90, 0x45, 0x41, 0x49, 0xdf, 0x0f, 0x2f, 0x3a, 0xd8, 0x90, 0x1d,
	0xa1, 0x6b, 0xb0, 0x9c, 0xeb, 0x99, 0x7a, 0x0a, 0x99, 0x66, 0x32, 0x28, 0x37, 0xbd, 0x76, 0x09,
	0xa3, 0x4c, 0xd9, 0x88, 0x0c, 0xc7, 0xe8, 0x65, 0xa8, 0xa6, 0xe3, 0xfe, 0x88, 0x0d, 0x42, 0x96,
	0x06, 0x15, 0xe3, 0xd3, 0xb7, 0xc0, 0x56, 0x8a, 0x5e, 0x82, 0x0a, 0x4b, 0x1f, 0x4a, 0x7d, 0x9c,
	0x6f, 0x44, 0x65, 0xbd, 0xdd, 0x8a, 0xea, 0xff, 0x78, 0x00, 0x93, 0x20, 0xd0, 0x2a, 0x94, 0x75,
	0x9f, 0xd0, 0xe8, 0xec, 0x36, 0x71, 0x8a, 0xe8, 0x22, 0x94, 0xd3, 0x84, 0x71, 0x25, 0x5d, 0x33,
	0xb8, 0x1d, 0x6a, 0x42, 0xcd, 0xd5, 0x3e, 0x4b, 0xb8, 0x2d, 0xfe, 0x12, 0x9e, 0x86, 0xd0, 0x2b,
	0x50, 0x95, 0xc9, 0x68, 0x6c, 0xe5, 0x45, 0x23, 0x9f, 0x00, 0xe8, 0x06, 0xf8, 0x8f, 0x18, 0xe7,
	0x8c, 0x0f, 0xa5, 0xa1, 0xe8, 0xb4, 0xcb, 0xb8, 0x42, 0xc8, 0x0d, 0xd0, 0x1b, 0xb0, 0x24, 0x28,
	0x8f, 0xa8, 0x08, 0xa3, 0xb1, 0x70, 0x37, 0x28, 0x37, 0x0b, 0xed, 0x02, 0x3e, 0x6f, 0xf1, 0x0f,
	0x33, 0xb8, 0xf5, 0xc7, 0x3c, 0x2c, 0xce, 0x94, 0xa7, 0x8e, 0x48, 0x99, 0x2c, 0xd8, 0xd2, 0xc1,
	0x6e, 0x87, 0xde, 0x86, 0xaa, 0xa0, 0x5f, 0x8d, 0xa9, 0x54, 0x54, 0x98, 0x60, 0x4f, 0xab, 0xaa,
	0x89, 0x2a, 0x5a, 0x82, 0xc2, 0x80, 0x45, 0x86, 0x81, 0x2a, 0xd6, 0x4b, 0x74, 0x19, 0x16, 0x48,
	0x9c, 0x8c, 0xb9, 0x0a, 0x1f, 0xb2, 0x11, 0xcd, 0x82, 0xaf, 0x59, 0xec, 0x96, 0x86, 0x50, 0x03,
	0x80, 0x71, 0xa9, 0xc4, 0x38, 0xa6, 0x5c, 0xb9, 0x1a, 0x99, 0x42, 0xb4, 0xd3, 0x38, 0xbd, 0x6e,
	0xea, 0xc1, 0xc7, 0x7a, 0xa9, 0xe9, 0x1c, 0x24, 0x71, 0x3a, 0xa2, 0x8a, 0x46, 0xa6, 0x00, 0x7c,
	0x3c, 0x01, 0x74, 0x66, 0x05, 0x7d, 0x44, 0x84, 0x2d, 0x80, 0xd3, 0x33, 0x6b, 0x15, 0xd1, 0x07,
	0x50, 0xb1, 0xb5, 0x27, 0x83, 0xaa, 0xe9, 0xc6, 0x2b, 0x67, 0x8e, 0x10, 0xa3, 0x8e, 0x33, 0xb3,
	0xd6, 0xdf, 0x15, 0x38, 0x7f, 0x48, 0xa8, 0xeb, 0x34, 0xab, 0xe8, 0x8c, 0x60, 0xdf, 0x02, 0x5b,
	0x91, 0xae, 0xd3, 0xac, 0x2d, 0xe6, 0x67, 0xb8, 0xaf, 0x83, 0xaf, 0xa9, 0xe2, 0x24, 0xa6, 0x8e,
	0xc8, 0x7c, 0x7f, 0x88, 0xaa, 0xe2, 0x49, 0x54, 0x95, 0x4e, 0xa0, 0xaa, 0x7c, 0x98, 0xaa, 0x60,
	0x32, 0x85, 0x2a, 0xcd, 0x42, 0xbb, 0x9a, 0x0f, 0x18, 0x74, 0x07, 0xfc, 0xac, 0x40, 0x1d, 0x8d,
	0xdd, 0xe7, 0xa3, 0xa4, 0xd3, 0x73, 0x66, 0x38, 0x77, 0x80, 0x7a, 0xb3, 0x0d, 0x62, 0x29, 0x5e,
	0x7d, 0x4e, 0x7f, 0xdb, 0xb9, 0xe5, 0x6c, 0x4f, 0x5d, 0x83, 0x65, 0xb2, 0x47, 0x05, 0x19, 0xd2,
	0x50, 0x2a, 0x1a, 0x87, 0x92, 0x0e, 0x12, 0x1e, 0xc9, 0x00, 0x4c, 0x6f, 0x22, 0x27, 0xd3, 0x8e,
	0x7a, 0x56, 0x52, 0xff, 0xcd, 0x03, 0x3f, 0xbb, 0x1d, 0x7a, 0x17, 0x6a, 0xa9, 0x48, 0xd2, 0x44,
	0xd2, 0x28, 0xec, 0x1f, 0x9c, 0x39, 0x3a, 0x21, 0x53, 0x5e, 0x3f, 0x40, 0x37, 0xa1, 0xa4, 0x4f,
	0xd4, 0x63, 0xe0, 0xb4, 0x0f, 0xc2, 0x11, 0x62, 0x14, 0x8d, 0xb1, 0xb5, 0x44, 0x2b, 0x00, 0x6e,
	0x84, 0xed, 0xd2, 0x03, 0x97, 0x66, 0x37, 0xd4, 0xee, 0xd0, 0x03, 0x9d, 0xc7, 0x88, 0x09, 0x97,
	0x60, 0xbd, 0xd4, 0x55, 0x41, 0x06, 0x03, 0x9a, 0xea, 0x34, 0xda, 0xf4, 0xe6, 0xfb, 0xfa, 0xcf,
	0x1e, 0xc0, 0x84, 0x25, 0xdd, 0xbc, 0xf9, 0xa7, 0xf8, 0xcc, 0xb8, 0x26, 0xaa, 0xff, 0x43, 0x58,
	0x2b, 0x00, 0x4c, 0x86, 0x82, 0xee, 0x51, 0x21, 0xa9, 0xfb, 0x5e, 0x54, 0x99, 0xc4, 0x16, 0xa8,
	0x7f, 0xeb, 0x41, 0x51, 0x7b, 0x9b, 0x69, 0x01, 0xef, 0x50, 0x0b, 0xe8, 0x51, 0xca, 0x86, 0x9c,
	0xa8, 0xb1, 0xa0, 0xae, 0x73, 0x26, 0xc0, 0x31, 0x03, 0x08, 0x41, 0x71, 0x87, 0xc8, 0x1d, 0xc7,
	0xa5, 0x59, 0xeb, 0x36, 0x32, 0x61, 0x6f, 0xe8, 0x21, 0x64, 0xe8, 0x2c, 0xe0, 0x29, 0x04, 0xb5,
	0x60, 0x81, 0xf1, 0x29, 0x8d, 0xb2, 0xd1, 0x98, 0xc1, 0x5a, 0x57, 0xe1, 0xc2, 0x91, 0xf7, 0x84,
	0x9e, 0xa7, 0x9c, 0xee, 0x2b, 0x37, 0x4f, 0x0b, 0xd8, 0xed, 0x5a, 0x5f, 0xc3, 0xf2, 0x71, 0xcf,
	0x03, 0xb4, 0x0c, 0x25, 0xfb, 0xb1, 0xb3, 0x51, 0xda, 0x0d, 0xba, 0x0f, 0x8b, 0x33, 0x0f, 0x06,
	0x13, 0x66, 0x6d, 0xed, 0xb5, 0xe7, 0x79, 0xd6, 0xb8, 0xef, 0xc3, 0xac, 0x83, 0xd6, 0x8f, 0xd3,
	0x93, 0xff, 0x6e, 0x32, 0x94, 0x9a, 0xe2, 0x6c, 0x14, 0x1d, 0x19, 0x4d, 0x9b, 0x50, 0x1c, 0x25,
	0xc3, 0xac, 0x0e, 0xce, 0xec, 0x53, 0xed, 0x6f, 0x66, 0x87, 0x8d, 0x79, 0xfd, 0x27, 0x0f, 0x16,
	0xa6, 0x61, 0x9d, 0x9c, 0x51, 0x32, 0x74, 0x49, 0xd3, 0x4b, 0x9d, 0x4c, 0xc5, 0x62, 0x2a, 0x15,
	0x89, 0x53, 0xf7, 0x68, 0x9c, 0x00, 0x68, 0x1b, 0x7c, 0xa9, 0x4b, 0x83, 0xa9, 0x03, 0x93, 0xbe,
	0x73, 0x6b, 0xef, 0xfd, 0xe7, 0xbb, 0x74, 0x7a, 0x9b, 0xdb, 0x9b, 0x78, 0xeb, 0xc1, 0x67, 0x38,
	0xf7, 0xd5, 0x7a, 0x13, 0xfc, 0x0c, 0x45, 0x3e, 0x14, 0xb7, 0x3e, 0xbe, 0x75, 0x6f, 0x69, 0x0e,
	0xd5, 0xa0, 0xd2, 0xfb, 0x64, 0x63, 0x63, 0xb3, 0xd7, 0x5b, 0xf2, 0x50, 0x15, 0x4a, 0x9b, 0x18,
	0xdf, 0xc3, 0x4b, 0xf3, 0xeb, 0xef, 0x3c, 0x7e, 0xda, 0xf0, 0x9e, 0x3c, 0x6d, 0x78, 0x7f, 0x3d,
	0x6d, 0x78, 0xdf, 0x3c, 0x6b, 0xcc, 0x3d, 0x79, 0xd6, 0x98, 0xfb, 0xfd, 0x59, 0x63, 0xee, 0xf3,
	0x95, 0x21, 0x53, 0x3b, 0xe3, 0x7e, 0x67, 0x90, 0xc4, 0xdd, 0xa3, 0xbf, 0x05, 0xfd, 0xb2, 0x79,
	0xa6, 0x5f, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x58, 0x8d, 0x1c, 0x33, 0x0c, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinValidators != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MinValidators))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxWorkersPerThread != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxWorkersPerThread))
		i--
		dAtA[i] = 0x10
	}
	if m.MinWorkerStaking != nil {
		{
			size, err := m.MinWorkerStaking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Workers) > 0 {
		for iNdEx := len(m.Workers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Workers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AudioStemTaskList) > 0 {
		for iNdEx := len(m.AudioStemTaskList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AudioStemTaskList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.AudioStemTaskInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Worker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Worker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Worker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IpfsId) > 0 {
		i -= len(m.IpfsId)
		copy(dAtA[i:], m.IpfsId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IpfsId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PublicIp) > 0 {
		i -= len(m.PublicIp)
		copy(dAtA[i:], m.PublicIp)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PublicIp)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CurrentThreadIndex != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CurrentThreadIndex))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CurrentTaskId) > 0 {
		i -= len(m.CurrentTaskId)
		copy(dAtA[i:], m.CurrentTaskId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CurrentTaskId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Reputation != nil {
		{
			size, err := m.Reputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Worker_Reputation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Worker_Reputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Worker_Reputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RenderDurations) > 0 {
		dAtA6 := make([]byte, len(m.RenderDurations)*10)
		var j5 int
		for _, num1 := range m.RenderDurations {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintTypes(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.Winnings.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Solutions != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Solutions))
		i--
		dAtA[i] = 0x20
	}
	if m.Validations != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Validations))
		i--
		dAtA[i] = 0x18
	}
	if m.Points != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Points))
		i--
		dAtA[i] = 0x10
	}
	if m.Staked != nil {
		{
			size, err := m.Staked.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AudioStemTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioStemTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AudioStemTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Threads) > 0 {
		for iNdEx := len(m.Threads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Threads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Reward != nil {
		{
			size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Mp3 {
		i--
		if m.Mp3 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Instrument) > 0 {
		i -= len(m.Instrument)
		copy(dAtA[i:], m.Instrument)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Instrument)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AmountFiles != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AmountFiles))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AudioStemThread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioStemThread) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AudioStemThread) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AverageStemSeconds != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AverageStemSeconds))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Validations) > 0 {
		for iNdEx := len(m.Validations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Solution != nil {
		{
			size, err := m.Solution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Workers) > 0 {
		for iNdEx := len(m.Workers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Workers[iNdEx])
			copy(dAtA[i:], m.Workers[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Workers[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Mp3 {
		i--
		if m.Mp3 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Instrument) > 0 {
		i -= len(m.Instrument)
		copy(dAtA[i:], m.Instrument)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Instrument)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ThreadId) > 0 {
		i -= len(m.ThreadId)
		copy(dAtA[i:], m.ThreadId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ThreadId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AudioStemThread_Solution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioStemThread_Solution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AudioStemThread_Solution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Accepted {
		i--
		if m.Accepted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Dir) > 0 {
		i -= len(m.Dir)
		copy(dAtA[i:], m.Dir)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Dir)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Stems) > 0 {
		for iNdEx := len(m.Stems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ProposedBy) > 0 {
		i -= len(m.ProposedBy)
		copy(dAtA[i:], m.ProposedBy)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ProposedBy)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AudioStemThread_Validation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioStemThread_Validation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AudioStemThread_Validation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsReverse {
		i--
		if m.IsReverse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Stems) > 0 {
		for iNdEx := len(m.Stems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AudioStemThread_Stem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioStemThread_Stem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AudioStemThread_Stem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InvalidCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.InvalidCount))
		i--
		dAtA[i] = 0x30
	}
	if m.ValidCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ValidCount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AudioStemTaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioStemTaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AudioStemTaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NextId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IndexedAudioStemTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexedAudioStemTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexedAudioStemTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AudioStemTask.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AudioStemLogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioStemLogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AudioStemLogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for iNdEx := len(m.Logs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Logs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ThreadId) > 0 {
		i -= len(m.ThreadId)
		copy(dAtA[i:], m.ThreadId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ThreadId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AudioStemLogs_AudioStemLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioStemLogs_AudioStemLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AudioStemLogs_AudioStemLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Severity != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Severity))
		i--
		dAtA[i] = 0x20
	}
	if m.Timestamp != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Log) > 0 {
		i -= len(m.Log)
		copy(dAtA[i:], m.Log)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Log)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinWorkerStaking != nil {
		l = m.MinWorkerStaking.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MaxWorkersPerThread != 0 {
		n += 1 + sovTypes(uint64(m.MaxWorkersPerThread))
	}
	if m.MinValidators != 0 {
		n += 1 + sovTypes(uint64(m.MinValidators))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.AudioStemTaskInfo.Size()
	n += 1 + l + sovTypes(uint64(l))
	if len(m.AudioStemTaskList) > 0 {
		for _, e := range m.AudioStemTaskList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Workers) > 0 {
		for _, e := range m.Workers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Worker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Reputation != nil {
		l = m.Reputation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	l = len(m.CurrentTaskId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CurrentThreadIndex != 0 {
		n += 1 + sovTypes(uint64(m.CurrentThreadIndex))
	}
	l = len(m.PublicIp)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.IpfsId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Worker_Reputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Staked != nil {
		l = m.Staked.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Points != 0 {
		n += 1 + sovTypes(uint64(m.Points))
	}
	if m.Validations != 0 {
		n += 1 + sovTypes(uint64(m.Validations))
	}
	if m.Solutions != 0 {
		n += 1 + sovTypes(uint64(m.Solutions))
	}
	l = m.Winnings.Size()
	n += 1 + l + sovTypes(uint64(l))
	if len(m.RenderDurations) > 0 {
		l = 0
		for _, e := range m.RenderDurations {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *AudioStemTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AmountFiles != 0 {
		n += 1 + sovTypes(uint64(m.AmountFiles))
	}
	l = len(m.Instrument)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Mp3 {
		n += 2
	}
	if m.Completed {
		n += 2
	}
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Threads) > 0 {
		for _, e := range m.Threads {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *AudioStemThread) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ThreadId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Instrument)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Mp3 {
		n += 2
	}
	if m.Completed {
		n += 2
	}
	if len(m.Workers) > 0 {
		for _, s := range m.Workers {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Solution != nil {
		l = m.Solution.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Validations) > 0 {
		for _, e := range m.Validations {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.AverageStemSeconds != 0 {
		n += 1 + sovTypes(uint64(m.AverageStemSeconds))
	}
	return n
}

func (m *AudioStemThread_Solution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposedBy)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Stems) > 0 {
		for _, e := range m.Stems {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Dir)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Accepted {
		n += 2
	}
	return n
}

func (m *AudioStemThread_Validation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Stems) > 0 {
		for _, e := range m.Stems {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.IsReverse {
		n += 2
	}
	return n
}

func (m *AudioStemThread_Stem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ValidCount != 0 {
		n += 1 + sovTypes(uint64(m.ValidCount))
	}
	if m.InvalidCount != 0 {
		n += 1 + sovTypes(uint64(m.InvalidCount))
	}
	return n
}

func (m *AudioStemTaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextId != 0 {
		n += 1 + sovTypes(uint64(m.NextId))
	}
	return n
}

func (m *IndexedAudioStemTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.AudioStemTask.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *AudioStemLogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ThreadId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *AudioStemLogs_AudioStemLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Log)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTypes(uint64(m.Timestamp))
	}
	if m.Severity != 0 {
		n += 1 + sovTypes(uint64(m.Severity))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinWorkerStaking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinWorkerStaking == nil {
				m.MinWorkerStaking = &types.Coin{}
			}
			if err := m.MinWorkerStaking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWorkersPerThread", wireType)
			}
			m.MaxWorkersPerThread = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxWorkersPerThread |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValidators", wireType)
			}
			m.MinValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinValidators |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AudioStemTaskInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AudioStemTaskInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AudioStemTaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AudioStemTaskList = append(m.AudioStemTaskList, IndexedAudioStemTask{})
			if err := m.AudioStemTaskList[len(m.AudioStemTaskList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workers = append(m.Workers, Worker{})
			if err := m.Workers[len(m.Workers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Worker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Worker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Worker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reputation == nil {
				m.Reputation = &Worker_Reputation{}
			}
			if err := m.Reputation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentTaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentThreadIndex", wireType)
			}
			m.CurrentThreadIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentThreadIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpfsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpfsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Worker_Reputation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reputation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reputation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Staked == nil {
				m.Staked = &types.Coin{}
			}
			if err := m.Staked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			m.Points = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Points |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validations", wireType)
			}
			m.Validations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Validations |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Solutions", wireType)
			}
			m.Solutions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Solutions |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winnings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Winnings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RenderDurations = append(m.RenderDurations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RenderDurations) == 0 {
					m.RenderDurations = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RenderDurations = append(m.RenderDurations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderDurations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioStemTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioStemTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioStemTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountFiles", wireType)
			}
			m.AmountFiles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountFiles |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instrument", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instrument = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mp3", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mp3 = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &types.Coin{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Threads = append(m.Threads, &AudioStemThread{})
			if err := m.Threads[len(m.Threads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioStemThread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioStemThread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioStemThread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instrument", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instrument = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mp3", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mp3 = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workers = append(m.Workers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Solution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Solution == nil {
				m.Solution = &AudioStemThread_Solution{}
			}
			if err := m.Solution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validations = append(m.Validations, &AudioStemThread_Validation{})
			if err := m.Validations[len(m.Validations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageStemSeconds", wireType)
			}
			m.AverageStemSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageStemSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioStemThread_Solution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Solution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Solution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stems = append(m.Stems, &AudioStemThread_Stem{})
			if err := m.Stems[len(m.Stems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accepted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Accepted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioStemThread_Validation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stems = append(m.Stems, &AudioStemThread_Stem{})
			if err := m.Stems[len(m.Stems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReverse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReverse = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioStemThread_Stem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidCount", wireType)
			}
			m.ValidCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidCount", wireType)
			}
			m.InvalidCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioStemTaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioStemTaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioStemTaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextId", wireType)
			}
			m.NextId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexedAudioStemTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexedAudioStemTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexedAudioStemTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AudioStemTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AudioStemTask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioStemLogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioStemLogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioStemLogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &AudioStemLogs_AudioStemLog{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioStemLogs_AudioStemLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioStemLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioStemLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			m.Severity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Severity |= AudioStemLogs_AudioStemLog_SEVERITY(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
